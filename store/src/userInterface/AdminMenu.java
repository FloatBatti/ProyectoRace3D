/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface;

import Entidades.Player;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author AgusGonza
 */
public class AdminMenu extends javax.swing.JFrame {

    private static Player actualUser = null;
    
    public AdminMenu() {
        initComponents();
        this.setLocationRelativeTo(null);
        updateTableDefault();
        UserTable.addMouseListener(new MouseAdapter(){
            
            public void mousePressed(MouseEvent Mouse_evt){
                
                JTable table = (JTable) Mouse_evt.getSource();
                Point point = Mouse_evt.getPoint();
                int row = table.rowAtPoint(point);
                if (Mouse_evt.getClickCount() == 1){

                    IdUserTxt.setText((String) UserTable.getValueAt(UserTable.getSelectedRow(), 0));
                    NickNameTxt.setText((String) UserTable.getValueAt(UserTable.getSelectedRow(), 1));
                    PassWordTxt.setText((String) UserTable.getValueAt(UserTable.getSelectedRow(), 2));
                    CoinsTxt.setText((String) UserTable.getValueAt(UserTable.getSelectedRow(), 4));
                    ComboLife.setSelectedItem(UserTable.getValueAt(UserTable.getSelectedRow(), 5));
                    ComboAcc.setSelectedItem(UserTable.getValueAt(UserTable.getSelectedRow(), 6));
                    ComboDrift.setSelectedItem(UserTable.getValueAt(UserTable.getSelectedRow(), 7));
                    ComboCars.setSelectedItem(UserTable.getValueAt(UserTable.getSelectedRow(), 8));
                    ComboCondition.setSelectedItem(UserTable.getValueAt(UserTable.getSelectedRow(), 9));
                    
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        AreaTable = new javax.swing.JScrollPane();
        UserTable = new javax.swing.JTable();
        NickTitle = new javax.swing.JLabel();
        NickNameTxt = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        PassTitle = new javax.swing.JLabel();
        PassWordTxt = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        CoinsTitle = new javax.swing.JLabel();
        CoinsTxt = new javax.swing.JTextField();
        LifeTitle = new javax.swing.JLabel();
        ComboLife = new javax.swing.JComboBox<>();
        AccTitle = new javax.swing.JLabel();
        ComboAcc = new javax.swing.JComboBox<>();
        DriftTitle = new javax.swing.JLabel();
        ComboDrift = new javax.swing.JComboBox<>();
        CarsTitle = new javax.swing.JLabel();
        ComboCars = new javax.swing.JComboBox<>();
        ConditionTitle = new javax.swing.JLabel();
        ComboCondition = new javax.swing.JComboBox<>();
        BtnCreate = new javax.swing.JButton();
        BtnUpdate = new javax.swing.JButton();
        BtnRemove = new javax.swing.JButton();
        CheckBox = new javax.swing.JCheckBox();
        IdUserTxt = new javax.swing.JTextField();
        BtnClean = new javax.swing.JButton();
        ShowDefault = new javax.swing.JButton();
        SortByExplosions = new javax.swing.JButton();
        ShowActives = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Title.setBackground(new java.awt.Color(0, 0, 0));
        Title.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 26)); // NOI18N
        Title.setForeground(new java.awt.Color(0, 0, 0));
        Title.setText("User data");
        jPanel1.add(Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        UserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nick Name", "Password", "Max Explosions", "Coins", "Life", "Acceleration", "Drift", "Cant. Cars", "Condition"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AreaTable.setViewportView(UserTable);
        if (UserTable.getColumnModel().getColumnCount() > 0) {
            UserTable.getColumnModel().getColumn(0).setMinWidth(20);
            UserTable.getColumnModel().getColumn(0).setPreferredWidth(20);
            UserTable.getColumnModel().getColumn(0).setMaxWidth(20);
            UserTable.getColumnModel().getColumn(1).setPreferredWidth(45);
            UserTable.getColumnModel().getColumn(2).setPreferredWidth(45);
            UserTable.getColumnModel().getColumn(3).setPreferredWidth(45);
            UserTable.getColumnModel().getColumn(4).setPreferredWidth(20);
            UserTable.getColumnModel().getColumn(5).setPreferredWidth(25);
            UserTable.getColumnModel().getColumn(6).setPreferredWidth(40);
            UserTable.getColumnModel().getColumn(7).setPreferredWidth(25);
            UserTable.getColumnModel().getColumn(8).setPreferredWidth(20);
            UserTable.getColumnModel().getColumn(9).setPreferredWidth(40);
        }

        jPanel1.add(AreaTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 740, 210));

        NickTitle.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 18)); // NOI18N
        NickTitle.setForeground(new java.awt.Color(0, 0, 0));
        NickTitle.setText("Nick Name");
        jPanel1.add(NickTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, -1, -1));

        NickNameTxt.setBackground(new java.awt.Color(255, 255, 255));
        NickNameTxt.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 14)); // NOI18N
        NickNameTxt.setForeground(new java.awt.Color(0, 0, 0));
        NickNameTxt.setBorder(null);
        jPanel1.add(NickNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 90, -1));

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 90, 20));

        PassTitle.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 18)); // NOI18N
        PassTitle.setForeground(new java.awt.Color(0, 0, 0));
        PassTitle.setText("PassWord");
        jPanel1.add(PassTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 330, -1, -1));

        PassWordTxt.setBackground(new java.awt.Color(255, 255, 255));
        PassWordTxt.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 14)); // NOI18N
        PassWordTxt.setForeground(new java.awt.Color(0, 0, 0));
        PassWordTxt.setBorder(null);
        jPanel1.add(PassWordTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, 90, -1));

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 380, 90, 20));

        CoinsTitle.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 14)); // NOI18N
        CoinsTitle.setForeground(new java.awt.Color(0, 0, 0));
        CoinsTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CoinsTitle.setText("Coins");
        jPanel1.add(CoinsTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 330, 50, -1));

        CoinsTxt.setBackground(new java.awt.Color(255, 255, 255));
        CoinsTxt.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 12)); // NOI18N
        CoinsTxt.setForeground(new java.awt.Color(0, 0, 0));
        CoinsTxt.setText("0");
        jPanel1.add(CoinsTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 360, 50, -1));

        LifeTitle.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 14)); // NOI18N
        LifeTitle.setForeground(new java.awt.Color(0, 0, 0));
        LifeTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LifeTitle.setText("Life");
        jPanel1.add(LifeTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 330, 50, -1));

        ComboLife.setBackground(new java.awt.Color(255, 255, 255));
        ComboLife.setForeground(new java.awt.Color(0, 0, 0));
        ComboLife.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5" }));
        jPanel1.add(ComboLife, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 360, 50, -1));

        AccTitle.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 14)); // NOI18N
        AccTitle.setForeground(new java.awt.Color(0, 0, 0));
        AccTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AccTitle.setText("Acceleration");
        jPanel1.add(AccTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 330, 90, -1));

        ComboAcc.setBackground(new java.awt.Color(255, 255, 255));
        ComboAcc.setForeground(new java.awt.Color(0, 0, 0));
        ComboAcc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5" }));
        jPanel1.add(ComboAcc, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 360, 50, -1));

        DriftTitle.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 14)); // NOI18N
        DriftTitle.setForeground(new java.awt.Color(0, 0, 0));
        DriftTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriftTitle.setText("Drift");
        jPanel1.add(DriftTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 330, 50, -1));

        ComboDrift.setBackground(new java.awt.Color(255, 255, 255));
        ComboDrift.setForeground(new java.awt.Color(0, 0, 0));
        ComboDrift.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5" }));
        jPanel1.add(ComboDrift, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 360, 50, -1));

        CarsTitle.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 14)); // NOI18N
        CarsTitle.setForeground(new java.awt.Color(0, 0, 0));
        CarsTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CarsTitle.setText("Cars");
        jPanel1.add(CarsTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 330, 50, -1));

        ComboCars.setBackground(new java.awt.Color(255, 255, 255));
        ComboCars.setForeground(new java.awt.Color(0, 0, 0));
        ComboCars.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));
        jPanel1.add(ComboCars, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 360, 50, -1));

        ConditionTitle.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 14)); // NOI18N
        ConditionTitle.setForeground(new java.awt.Color(0, 0, 0));
        ConditionTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ConditionTitle.setText("Condition");
        jPanel1.add(ConditionTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 330, 80, -1));

        ComboCondition.setBackground(new java.awt.Color(255, 255, 255));
        ComboCondition.setForeground(new java.awt.Color(0, 0, 0));
        ComboCondition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "No Active" }));
        jPanel1.add(ComboCondition, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 360, 90, -1));

        BtnCreate.setBackground(new java.awt.Color(0, 153, 0));
        BtnCreate.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 12)); // NOI18N
        BtnCreate.setForeground(new java.awt.Color(255, 255, 255));
        BtnCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/addUser.png"))); // NOI18N
        BtnCreate.setText("Create");
        BtnCreate.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnCreateMouseClicked(evt);
            }
        });
        jPanel1.add(BtnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 460, 100, 50));

        BtnUpdate.setBackground(new java.awt.Color(0, 153, 153));
        BtnUpdate.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 12)); // NOI18N
        BtnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        BtnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Actualziar.png"))); // NOI18N
        BtnUpdate.setText("Update");
        BtnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnUpdateMouseClicked(evt);
            }
        });
        jPanel1.add(BtnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 460, 100, 50));

        BtnRemove.setBackground(new java.awt.Color(153, 0, 0));
        BtnRemove.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 12)); // NOI18N
        BtnRemove.setForeground(new java.awt.Color(255, 255, 255));
        BtnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Eliminar.png"))); // NOI18N
        BtnRemove.setText("Remove");
        BtnRemove.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnRemoveMouseClicked(evt);
            }
        });
        jPanel1.add(BtnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 460, 110, 50));

        CheckBox.setBackground(new java.awt.Color(255, 255, 255));
        CheckBox.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 12)); // NOI18N
        CheckBox.setForeground(new java.awt.Color(0, 0, 0));
        CheckBox.setText("Confirm");
        CheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(CheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 530, 100, -1));

        IdUserTxt.setEditable(false);
        IdUserTxt.setBackground(new java.awt.Color(255, 255, 255));
        IdUserTxt.setForeground(new java.awt.Color(255, 255, 255));
        IdUserTxt.setBorder(null);
        jPanel1.add(IdUserTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, 30, -1));

        BtnClean.setBackground(new java.awt.Color(255, 255, 255));
        BtnClean.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 12)); // NOI18N
        BtnClean.setForeground(new java.awt.Color(0, 0, 0));
        BtnClean.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        BtnClean.setText("  Clean");
        BtnClean.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnCleanMouseClicked(evt);
            }
        });
        jPanel1.add(BtnClean, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 410, 100, 30));

        ShowDefault.setBackground(new java.awt.Color(255, 255, 255));
        ShowDefault.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 12)); // NOI18N
        ShowDefault.setForeground(new java.awt.Color(0, 0, 0));
        ShowDefault.setText("Show default");
        ShowDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowDefaultMouseClicked(evt);
            }
        });
        ShowDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowDefaultActionPerformed(evt);
            }
        });
        jPanel1.add(ShowDefault, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 30, 120, 30));

        SortByExplosions.setBackground(new java.awt.Color(255, 255, 255));
        SortByExplosions.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 12)); // NOI18N
        SortByExplosions.setForeground(new java.awt.Color(0, 0, 0));
        SortByExplosions.setText("Order by Explosions");
        SortByExplosions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SortByExplosionsMouseClicked(evt);
            }
        });
        jPanel1.add(SortByExplosions, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, 160, 30));

        ShowActives.setBackground(new java.awt.Color(255, 255, 255));
        ShowActives.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 12)); // NOI18N
        ShowActives.setForeground(new java.awt.Color(0, 0, 0));
        ShowActives.setText("Show the actives");
        ShowActives.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowActivesMouseClicked(evt);
            }
        });
        jPanel1.add(ShowActives, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 30, 140, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCreateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnCreateMouseClicked
        
       
        if(CheckBox.isSelected() && checkUser(NickNameTxt.getText()) == false && IdUserTxt.getText().equals("")){

            Player aux = playerTextFields();
            
            Player.createPlayer(aux.getUserName(), aux.getPassword());
            
            updateTableDefault();
            
            cleanFields();
            
            JOptionPane.showMessageDialog(null, "Player created!");
            
        }
        else if (!CheckBox.isSelected()){

            JOptionPane.showMessageDialog(null, "Confirm for create Player");
            
        }else if(checkUser(NickNameTxt.getText()) == true){
            
            JOptionPane.showMessageDialog(null, "The Player already exist");
            CheckBox.setSelected(false);
            
        }else if(!IdUserTxt.getText().equals("")){
            
            JOptionPane.showMessageDialog(null, "Please, clean the fields");
        }
    }//GEN-LAST:event_BtnCreateMouseClicked

    private void BtnUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnUpdateMouseClicked
        

        if(CheckBox.isSelected() && !IdUserTxt.getText().equals("")){

            Player aux = playerTextFields();           
            
            Player.modifyPlayer(aux);
            
            updateTableDefault();
            
            cleanFields();
            
            JOptionPane.showMessageDialog(null, "Player updated!");
            
        }else if (!CheckBox.isSelected()){

            JOptionPane.showMessageDialog(null, "Confirm for update Player");
            
        }else if (IdUserTxt.getText().equals("")){

            JOptionPane.showMessageDialog(null, "Chooce a Player");
            
        }
    }//GEN-LAST:event_BtnUpdateMouseClicked

    private void BtnRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnRemoveMouseClicked

        if(CheckBox.isSelected() && !IdUserTxt.getText().equals("")){
            
            Player.removePlayer(Integer.parseInt(IdUserTxt.getText()));
            
            updateTableDefault();
            
            cleanFields();
            
            JOptionPane.showMessageDialog(null, "Player has been removed!");
            
        }else if (!CheckBox.isSelected()){

            JOptionPane.showMessageDialog(null, "Confirm for remove Player");
            
        }else if (IdUserTxt.getText().equals("")){

            JOptionPane.showMessageDialog(null, "Chooce a Player");
            
        }
    }//GEN-LAST:event_BtnRemoveMouseClicked

    private void BtnCleanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnCleanMouseClicked
        
        cleanFields();
    }//GEN-LAST:event_BtnCleanMouseClicked

    private void ShowDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowDefaultMouseClicked
          
        updateTableDefault();
    }//GEN-LAST:event_ShowDefaultMouseClicked

    private void ShowActivesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowActivesMouseClicked
        
        updateTableActive();
        
    }//GEN-LAST:event_ShowActivesMouseClicked

    private void SortByExplosionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SortByExplosionsMouseClicked
        
        updateTableSort();
        
    }//GEN-LAST:event_SortByExplosionsMouseClicked

    private void ShowDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowDefaultActionPerformed
        
        updateTableDefault();
    }//GEN-LAST:event_ShowDefaultActionPerformed

    private void cleanTable(){
        
        DefaultTableModel modelo = (DefaultTableModel) UserTable.getModel();
        
        for(int i = modelo.getRowCount() - 1; i >= 0; i-- ) {
            modelo.removeRow(i);
        }
         
    }
    
    private void updateTableDefault(){
        
        cleanTable();
 
        DefaultTableModel modelo = (DefaultTableModel) UserTable.getModel();
        
        String [] datos = new String[10];
        
        if(Player.getListPlayer() != null){
           
            for (Player aux : Player.getListPlayer()){
                    
                datos[0] = Integer.toString(aux.getId());
                datos[1] = aux.getUserName();
                datos[2] = aux.getPassword();
                datos[3] = Integer.toString(aux.getMaxExplosions());
                datos[4] = Integer.toString(aux.getCoins());
                datos[5] = Integer.toString(translateStats(aux.getWorkshop().getHealtValues()));
                datos[6] = Integer.toString(translateStats(aux.getWorkshop().getForceValues()));
                datos[7] = Integer.toString(translateStats(aux.getWorkshop().getDriftValues()));
                datos[8] = Integer.toString(aux.getWorkshop().getsCarsValue());
                datos[9] = aux.isCondition() ? "Active" : "No Active";

                modelo.addRow(datos);
                
   
            }
            
        }
        
        
  
    }
    
    private void updateTableSort(){
        
        cleanTable();
 
        DefaultTableModel modelo = (DefaultTableModel) UserTable.getModel();
        
        List<Player> listPlayer = Player.getListPlayer();
        
        Collections.sort(listPlayer);
        
        String [] datos = new String[10];
        
        if( listPlayer != null){
           
            for (Player aux : listPlayer){
                    
                datos[0] = Integer.toString(aux.getId());
                datos[1] = aux.getUserName();
                datos[2] = aux.getPassword();
                datos[3] = Integer.toString(aux.getMaxExplosions());
                datos[4] = Integer.toString(aux.getCoins());
                datos[5] = Integer.toString(translateStats(aux.getWorkshop().getHealtValues()));
                datos[6] = Integer.toString(translateStats(aux.getWorkshop().getForceValues()));
                datos[7] = Integer.toString(translateStats(aux.getWorkshop().getDriftValues()));
                datos[8] = Integer.toString(aux.getWorkshop().getsCarsValue());
                datos[9] = aux.isCondition() ? "Active" : "No Active";

                modelo.addRow(datos);
                
   
            }
            
        }
        
        
  
    }
    
    private void updateTableActive(){
        
        cleanTable();
 
        DefaultTableModel modelo = (DefaultTableModel) UserTable.getModel();
        
        String [] datos = new String[10];
        
        if(Player.getListPlayer() != null){
           
            for (Player aux : Player.getListPlayer()){
           
                if (aux.isCondition()){
                    
                    datos[0] = Integer.toString(aux.getId());
                    datos[1] = aux.getUserName();
                    datos[2] = aux.getPassword();
                    datos[3] = Integer.toString(aux.getMaxExplosions());
                    datos[4] = Integer.toString(aux.getCoins());
                    datos[5] = Integer.toString(translateStats(aux.getWorkshop().getHealtValues()));
                    datos[6] = Integer.toString(translateStats(aux.getWorkshop().getForceValues()));
                    datos[7] = Integer.toString(translateStats(aux.getWorkshop().getDriftValues()));
                    datos[8] = Integer.toString(aux.getWorkshop().getsCarsValue());
                    datos[9] = "Active";

                    modelo.addRow(datos);
                }
   
            }
            
        }

    }
    
    private void cleanFields(){
        
        IdUserTxt.setText("");
        NickNameTxt.setText("");
        PassWordTxt.setText("");
        CoinsTxt.setText("0");
        ComboLife.setSelectedIndex(0);
        ComboAcc.setSelectedIndex(0);
        ComboDrift.setSelectedIndex(0);
        ComboCondition.setSelectedIndex(0);

        CheckBox.setSelected(false);
    }
    
    private Player playerTextFields(){
        
        Player auxPlayer = new Player();
        int lifeValue = Integer.parseInt(ComboLife.getSelectedItem().toString());
        int accValue = Integer.parseInt(ComboAcc.getSelectedItem().toString());
        int driftValue = Integer.parseInt(ComboDrift.getSelectedItem().toString());
        int carsValue = Integer.parseInt(ComboCars.getSelectedItem().toString());
        
        
        if (!(IdUserTxt.getText().equals(""))){
           
           auxPlayer.setId(Integer.parseInt(IdUserTxt.getText()));
        }
        else{
            auxPlayer.setId(0);
        }
        
        auxPlayer.setUserName(NickNameTxt.getText());
        auxPlayer.setPassword(PassWordTxt.getText());
        
        if (CoinsTxt.getText().equals("")){
            
            CoinsTxt.setText("0");
        }
        
        auxPlayer.setCoins(Integer.parseInt(CoinsTxt.getText()));
        
        for (int i = 0; i < lifeValue; i++){
            
            auxPlayer.getWorkshop().incremetHealt();
        }
        
        for (int i = 0; i < accValue; i++){
            
            auxPlayer.getWorkshop().incremetForce();
        }
        
        for (int i = 0; i < driftValue; i++){
            
            auxPlayer.getWorkshop().incremetDrift();
        }
        
        for (int i = 0; i < carsValue - 1; i++){
            
            auxPlayer.getWorkshop().buyCar();
        }
            
        auxPlayer.setCondition(ComboCondition.getSelectedItem().equals("Active"));
      
        
        return auxPlayer;
    }
               
    private int translateStats(int value){
        
        int level = 0;
        
        if (value == 20){
            
            level = 1;
            
        }else if(value == 40){
            
            level = 2;
            
        }else if(value == 60){
            
            level = 3;
            
        }else if(value == 80){
            
            level = 4;
            
        }else if(value == 100){
            
            level = 5;
        }
        
        return level;
    }
    
    private boolean checkUser(String userName){
        
        List <Player> listPlayer = Player.getListPlayer();
        
        if (listPlayer != null){
            
            for (Player aux : listPlayer){
            
                if (aux.getUserName().equals(userName)){

                    return true;
                }
            }
            
        }
        
       
        
        
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AccTitle;
    private javax.swing.JScrollPane AreaTable;
    private javax.swing.JButton BtnClean;
    private javax.swing.JButton BtnCreate;
    private javax.swing.JButton BtnRemove;
    private javax.swing.JButton BtnUpdate;
    private javax.swing.JLabel CarsTitle;
    private javax.swing.JCheckBox CheckBox;
    private javax.swing.JLabel CoinsTitle;
    private javax.swing.JTextField CoinsTxt;
    private javax.swing.JComboBox<String> ComboAcc;
    private javax.swing.JComboBox<String> ComboCars;
    private javax.swing.JComboBox<String> ComboCondition;
    private javax.swing.JComboBox<String> ComboDrift;
    private javax.swing.JComboBox<String> ComboLife;
    private javax.swing.JLabel ConditionTitle;
    private javax.swing.JLabel DriftTitle;
    private javax.swing.JTextField IdUserTxt;
    private javax.swing.JLabel LifeTitle;
    private javax.swing.JTextField NickNameTxt;
    private javax.swing.JLabel NickTitle;
    private javax.swing.JLabel PassTitle;
    private javax.swing.JTextField PassWordTxt;
    private javax.swing.JButton ShowActives;
    private javax.swing.JButton ShowDefault;
    private javax.swing.JButton SortByExplosions;
    private static javax.swing.JLabel Title;
    private javax.swing.JTable UserTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
